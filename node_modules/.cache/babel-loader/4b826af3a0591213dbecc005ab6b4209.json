{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jzxja\\\\Desktop\\\\reactState\\\\state-test\\\\src\\\\App.js\";\n\n/*\n  take in JSON packages which will then be converted to props\n  pass down those props to a render table function or class. \n  This render table function look for the state of the dropdown. when no state is chosen, show total score. When an option in the dropdown is chosen, switch the state and render those elements\n  category can be deleted from the table, and the webpage can just say \"TOP 10 leaders in \"category\"\n\n  personal stats should be a separate row at the top\n\n  learn how to take in a JSON package\n\nimport React, {Component} from 'react'\nimport './App.css'\nimport Table from 'react-bootstrap/Table'\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, DropdownButton} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css' // for the minimal css for table and buttons\n\n\n\n\nconst App = () => \n{\n  const leader = \n  [\n    {name: \"this guy\", category: \"Intro to C\", score: 10, percentage: \"\"},\n    {name: \"person\", category: \"Intro to C\", score: 6, percentage: \"\"},\n    {name: \"dude\", category: \"Intro to C\", score: 2, percentage: \"\"},\n    {name: \"someone\", category: \"Intro to C\", score: 4, percentage: \"\"}\n  ]\n\n  leader.sort((a, b) => (a.score < b.score) ? 1 : -1)\n  \n  \n  const renderTable = (leader, index) =>\n  {\n    const bool1 = 12;\n    const bool2 = 32; \n\n    \n    return(\n      <tr key = {index}>\n        <td>{++index}</td>\n        <td>{leader.name}</td>\n        <td>{leader.category}</td>\n        <td>{leader.score}</td>\n        <td>{leader.percentage}</td>\n      </tr>\n    )\n  }\n\n  return (\n  <div className = \"App\">\n    \n    <div class = 'row'>\n      <div className = \"header\" class = 'col-md-5'></div>\n      <div className = \"header\" class = 'col-md-7'>\n        <h1 id='title' class = 'text-left'>Trivia Crevice</h1>\n      </div>\n    </div>\n\n\n    <div class = 'row'>\n      <div className = \"dropDown\" class = 'col-md-5'>\n        <DropdownButton  class = 'text-left' id=\"dropdown-basic-button\" title=\"Category\" variant = 'success'>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-1\">Intro to C</Dropdown.Item>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-2\">CSI</Dropdown.Item>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-3\">CSII</Dropdown.Item>\n        </DropdownButton>\n      </div>\n\n\n      <div class = 'col-md-7'>\n        <h1 id = 'title' class = 'text-left'>Leaderboards</h1>\n      </div>\n    </div>\n    \n\n    \n\n    <Table borderd  hover>\n      <thead>\n        <tr>\n          <th>Rank</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Score</th>\n          <th>Percentage</th>\n        </tr>\n      </thead>\n      <tbody>\n       {leader.map(renderTable)}\n      </tbody>\n    </Table>\n  </div>\n  )\n\n}\n\nexport default App;\n*/\n// wrap RenderPersonalStats in multiple if statements to hardcode the right values to send\nimport React, { Component } from 'react';\nimport './App.css';\nimport Table from 'react-bootstrap/Table'; //import RenderPersonalStats from './RenderPersonalStats'\n\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, DropdownButton } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // for the minimal css for table and buttons\n// renders based on state and sends info based on which state to RenderPersonalStats\n\nfunction RenderPersonal(props) {\n  if (props.category === \"total\") {\n    return /*#__PURE__*/React.createElement(RenderPersonalStats, {\n      name: props.personalStats.name,\n      category: \"total\",\n      percentage: props.personalStats.percentage,\n      score: props.personalStats.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"cat is not \", props.category));\n  }\n}\n\nfunction RenderPersonalStats(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"Personal Stats\"), /*#__PURE__*/React.createElement(Table, {\n    borderd: true,\n    hover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Score\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"Percentage\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"guy\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, props.category), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"Score\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"Percentage\")))));\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leaders: [{\n        name: \"this guy\",\n        category: \"Intro to C\",\n        score: 10,\n        percentage: \"\"\n      }, {\n        name: \"person\",\n        category: \"Intro to C\",\n        score: 6,\n        percentage: \"\"\n      }, {\n        name: \"dude\",\n        category: \"Intro to C\",\n        score: 2,\n        percentage: \"\"\n      }, {\n        name: \"someone\",\n        category: \"Intro to C\",\n        score: 4,\n        percentage: \"\"\n      }],\n      personal: [{\n        name: \"me\",\n        intro: \"intro\",\n        cs1: \"cs1\",\n        cs2: \"cs2\",\n        total: \"total\",\n        score: 230,\n        percentage: 100\n      }],\n      category: \"total\",\n      deleteValue: 1\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }\n    }, \"Trivia Crevice\"), /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"title\",\n      class: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }\n    }, \"Leaderboards\"), /*#__PURE__*/React.createElement(RenderPersonal, {\n      category: this.state.category,\n      personalStats: this.state.personal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jzxja/Desktop/reactState/state-test/src/App.js"],"names":["React","Component","Table","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","DropdownButton","RenderPersonal","props","category","personalStats","name","percentage","score","RenderPersonalStats","App","constructor","state","leaders","personal","intro","cs1","cs2","total","deleteValue","render"],"mappings":"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","sourcesContent":["/*\n  take in JSON packages which will then be converted to props\n  pass down those props to a render table function or class. \n  This render table function look for the state of the dropdown. when no state is chosen, show total score. When an option in the dropdown is chosen, switch the state and render those elements\n  category can be deleted from the table, and the webpage can just say \"TOP 10 leaders in \"category\"\n\n  personal stats should be a separate row at the top\n\n  learn how to take in a JSON package\n\nimport React, {Component} from 'react'\nimport './App.css'\nimport Table from 'react-bootstrap/Table'\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, DropdownButton} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css' // for the minimal css for table and buttons\n\n\n\n\nconst App = () => \n{\n  const leader = \n  [\n    {name: \"this guy\", category: \"Intro to C\", score: 10, percentage: \"\"},\n    {name: \"person\", category: \"Intro to C\", score: 6, percentage: \"\"},\n    {name: \"dude\", category: \"Intro to C\", score: 2, percentage: \"\"},\n    {name: \"someone\", category: \"Intro to C\", score: 4, percentage: \"\"}\n  ]\n\n  leader.sort((a, b) => (a.score < b.score) ? 1 : -1)\n  \n  \n  const renderTable = (leader, index) =>\n  {\n    const bool1 = 12;\n    const bool2 = 32; \n\n    \n    return(\n      <tr key = {index}>\n        <td>{++index}</td>\n        <td>{leader.name}</td>\n        <td>{leader.category}</td>\n        <td>{leader.score}</td>\n        <td>{leader.percentage}</td>\n      </tr>\n    )\n  }\n\n  return (\n  <div className = \"App\">\n    \n    <div class = 'row'>\n      <div className = \"header\" class = 'col-md-5'></div>\n      <div className = \"header\" class = 'col-md-7'>\n        <h1 id='title' class = 'text-left'>Trivia Crevice</h1>\n      </div>\n    </div>\n\n\n    <div class = 'row'>\n      <div className = \"dropDown\" class = 'col-md-5'>\n        <DropdownButton  class = 'text-left' id=\"dropdown-basic-button\" title=\"Category\" variant = 'success'>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-1\">Intro to C</Dropdown.Item>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-2\">CSI</Dropdown.Item>\n          <Dropdown.Item id = 'ddOption' href=\"#/action-3\">CSII</Dropdown.Item>\n        </DropdownButton>\n      </div>\n\n\n      <div class = 'col-md-7'>\n        <h1 id = 'title' class = 'text-left'>Leaderboards</h1>\n      </div>\n    </div>\n    \n\n    \n\n    <Table borderd  hover>\n      <thead>\n        <tr>\n          <th>Rank</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Score</th>\n          <th>Percentage</th>\n        </tr>\n      </thead>\n      <tbody>\n       {leader.map(renderTable)}\n      </tbody>\n    </Table>\n  </div>\n  )\n\n}\n\nexport default App;\n*/\n\n// wrap RenderPersonalStats in multiple if statements to hardcode the right values to send\n\nimport React, {Component} from 'react'\nimport './App.css'\nimport Table from 'react-bootstrap/Table'\n//import RenderPersonalStats from './RenderPersonalStats'\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, DropdownButton} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css' // for the minimal css for table and buttons\n\n\n// renders based on state and sends info based on which state to RenderPersonalStats\nfunction RenderPersonal(props)\n{\n  \n  if (props.category === \"total\")\n  {\n    return(<RenderPersonalStats name = {props.personalStats.name} \n                                category = \"total\" \n                                percentage = {props.personalStats.percentage} \n                                score = {props.personalStats.score}/>)\n  }\n  else\n  {\n    return(<div><h1>cat is not {props.category}</h1></div>)\n  }\n}\n\nfunction RenderPersonalStats(props)\n{\n\n    return(\n\n      <div>\n          <h2>Personal Stats</h2>\n\n           <Table borderd hover>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Category</th>\n                <th>Score</th>\n                <th>Percentage</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>guy</td>\n                <td>{props.category}</td>\n                <td>Score</td>\n                <td>Percentage</td>\n              </tr>\n            </tbody>\n          </Table>\n      </div>\n    )\n}\n\nexport default class App extends Component\n{\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n        leaders:\n        [\n          {name: \"this guy\", category: \"Intro to C\", score: 10, percentage: \"\"},\n          {name: \"person\", category: \"Intro to C\", score: 6, percentage: \"\"},\n          {name: \"dude\", category: \"Intro to C\", score: 2, percentage: \"\"},\n          {name: \"someone\", category: \"Intro to C\", score: 4, percentage: \"\"}\n        ],\n        personal: [{name: \"me\", intro:\"intro\", cs1:\"cs1\", cs2: \"cs2\", total: \"total\", score: 230, percentage: 100}],\n        category: \"total\",\n        deleteValue: 1\n    }\n  }\n\n\n\n  render()\n  {\n\n    return(\n    \n    <div className = 'App'>\n\n    <h1 id = 'title'>Trivia Crevice</h1> \n    <h1 id = 'title' class = 'spacer'>Leaderboards</h1>\n\n\n    <RenderPersonal category = {this.state.category} personalStats = {this.state.personal}/>\n\n\n\n\n   </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}